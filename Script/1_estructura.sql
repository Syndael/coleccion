-- --------------------------------------------------------
-- Host:                         192.168.1.55
-- Versión del servidor:         10.11.2-MariaDB - Source distribution
-- SO del servidor:              Linux
-- HeidiSQL Versión:             12.5.0.6677
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


-- Volcando estructura de base de datos para coleccion
CREATE DATABASE IF NOT EXISTS `coleccion` /*!40100 DEFAULT CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci */;
USE `coleccion`;

-- Volcando estructura para tabla coleccion.BASE
CREATE TABLE IF NOT EXISTS `BASE` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `TIPO_ID` int(11) NOT NULL DEFAULT 1,
  `NOMBRE` varchar(255) NOT NULL,
  `CODIGO` varchar(255) DEFAULT NULL,
  `SAGA` varchar(255) DEFAULT NULL,
  `URL` varchar(255) DEFAULT NULL,
  `FECHA_SALIDA` date DEFAULT NULL,
  `PLATAFORMAS` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `TIPO_B_ID` (`TIPO_ID`),
  CONSTRAINT `TIPO_B_ID` FOREIGN KEY (`TIPO_ID`) REFERENCES `TIPO_BASE` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=578 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para procedimiento coleccion.BASE_REFRESH_PLATAFORMAS
DELIMITER //
CREATE PROCEDURE `BASE_REFRESH_PLATAFORMAS`(
	IN `BASE_ID` INT
)
BEGIN
	DECLARE plataformas_result TEXT;
	
	SELECT GROUP_CONCAT(
		COALESCE(p.CORTO, p.NOMBRE)
		ORDER BY COALESCE(p.CORTO, p.NOMBRE)
		SEPARATOR ', '
	)
	INTO plataformas_result
	FROM PLATAFORMA p
	INNER JOIN BASE_X_PLATAFORMA bxp ON bxp.PLATAFORMA_ID = p.ID
	WHERE bxp.BASE_ID = BASE_ID;
	
	UPDATE BASE SET PLATAFORMAS = plataformas_result WHERE ID = BASE_ID;
END//
DELIMITER ;

-- Volcando estructura para tabla coleccion.BASE_X_PLATAFORMA
CREATE TABLE IF NOT EXISTS `BASE_X_PLATAFORMA` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `BASE_ID` int(11) NOT NULL,
  `PLATAFORMA_ID` int(11) NOT NULL,
  `FECHA` date DEFAULT NULL,
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `PLAT_ID_JXP_FK` (`PLATAFORMA_ID`),
  KEY `BASE_ID_JXP_FK` (`BASE_ID`),
  CONSTRAINT `BASE_ID_JXP_FK` FOREIGN KEY (`BASE_ID`) REFERENCES `BASE` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `PLAT_ID_JXP_FK` FOREIGN KEY (`PLATAFORMA_ID`) REFERENCES `PLATAFORMA` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1411 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.COLECCION
CREATE TABLE IF NOT EXISTS `COLECCION` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `BASE_ID` int(11) NOT NULL,
  `EDICION_ID` int(11) DEFAULT NULL,
  `PLATAFORMA_ID` int(11) NOT NULL,
  `IDIOMA_ID` int(11) DEFAULT NULL,
  `REGION_ID` int(11) DEFAULT NULL,
  `ESTADO_GENERAL_ID` int(11) NOT NULL,
  `ESTADO_CAJA_ID` int(11) NOT NULL,
  `FECHA_RESERVA` date DEFAULT NULL,
  `FECHA_COMPRA` date DEFAULT NULL,
  `FECHA_RECIBO` date DEFAULT NULL,
  `UNIDADES` int(11) DEFAULT 1,
  `COSTE` decimal(20,6) DEFAULT NULL,
  `TIENDA_ID` int(11) DEFAULT NULL,
  `URL` varchar(255) DEFAULT NULL,
  `NOTAS` varchar(500) DEFAULT NULL,
  `FECHA_INS` datetime DEFAULT current_timestamp(),
  `ACTIVADO` bit(1) NOT NULL DEFAULT b'1',
  `CODIGO` varchar(250) DEFAULT NULL,
  `MASCARA_AUX` varchar(50) DEFAULT NULL,
  `ACTUALIZACIONES` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `CODIGO_C_UK` (`CODIGO`),
  KEY `PLATAFORMA_ID_C_FK` (`PLATAFORMA_ID`),
  KEY `IDIOMA_ID_C_FK` (`IDIOMA_ID`),
  KEY `REGION_ID_C_FK` (`REGION_ID`),
  KEY `ESTADO_GEN_ID_C_FK` (`ESTADO_GENERAL_ID`),
  KEY `TIENDA_ID_C_FK` (`TIENDA_ID`),
  KEY `ESTADO_CAJ_ID_C_FK` (`ESTADO_CAJA_ID`),
  KEY `BASE_ID_C_FK` (`BASE_ID`) USING BTREE,
  KEY `EDICION_ID_C_FK` (`EDICION_ID`),
  CONSTRAINT `BASE_ID_C_FK` FOREIGN KEY (`BASE_ID`) REFERENCES `BASE` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `EDICION_ID_C_FK` FOREIGN KEY (`EDICION_ID`) REFERENCES `EDICION` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `ESTADO_CAJ_ID_C_FK` FOREIGN KEY (`ESTADO_CAJA_ID`) REFERENCES `ESTADO` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `ESTADO_GEN_ID_C_FK` FOREIGN KEY (`ESTADO_GENERAL_ID`) REFERENCES `ESTADO` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `IDIOMA_ID_C_FK` FOREIGN KEY (`IDIOMA_ID`) REFERENCES `IDIOMA` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `PLATAFORMA_ID_C_FK` FOREIGN KEY (`PLATAFORMA_ID`) REFERENCES `PLATAFORMA` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `REGION_ID_C_FK` FOREIGN KEY (`REGION_ID`) REFERENCES `REGION` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `TIENDA_ID_C_FK` FOREIGN KEY (`TIENDA_ID`) REFERENCES `TIENDA` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=556 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para vista coleccion.COMPLETO
-- Creando tabla temporal para superar errores de dependencia de VIEW
CREATE TABLE `COMPLETO` (
	`id` BIGINT(21) NOT NULL,
	`MES` VARCHAR(15) NULL COLLATE 'utf8mb4_general_ci',
	`CANTIDAD` BIGINT(21) NOT NULL,
	`JUEGOS` MEDIUMTEXT NULL COLLATE 'utf8mb3_general_ci',
	`ORDEN_DESC` VARCHAR(6) NULL COLLATE 'utf8mb4_general_ci'
) ENGINE=MyISAM;

-- Volcando estructura para tabla coleccion.EDICION
CREATE TABLE IF NOT EXISTS `EDICION` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `BASE_ID` int(11) NOT NULL,
  `PLATAFORMA_ID` int(11) DEFAULT NULL,
  `NOMBRE` varchar(255) NOT NULL,
  `FECHA` date DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `BASE_ID_E_FK` (`BASE_ID`),
  KEY `PLATAFORMA_ID_E_FK` (`PLATAFORMA_ID`),
  CONSTRAINT `BASE_ID_E_FK` FOREIGN KEY (`BASE_ID`) REFERENCES `BASE` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `PLATAFORMA_ID_E_FK` FOREIGN KEY (`PLATAFORMA_ID`) REFERENCES `PLATAFORMA` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.ESTADO
CREATE TABLE IF NOT EXISTS `ESTADO` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `DESCRIPCION` varchar(50) NOT NULL,
  `TIPO` int(11) NOT NULL COMMENT '0 General, 1 Cajas, 2 Jugado',
  `ORDEN` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.FICHERO
CREATE TABLE IF NOT EXISTS `FICHERO` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `RUTA` varchar(255) NOT NULL,
  `NOMBRE_ORIGINAL` varchar(255) NOT NULL,
  `NOMBRE_ALMACENADO` varchar(255) NOT NULL,
  `TIPO_FICHERO_ID` int(11) NOT NULL,
  `COLECCION_ID` int(11) DEFAULT NULL,
  `PROGRESO_ID` int(11) DEFAULT NULL,
  `ACTIVADO` bit(1) NOT NULL DEFAULT b'1',
  `FECHA_INS` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`ID`) USING BTREE,
  KEY `TIPO_FICHERO_ID_F_FK` (`TIPO_FICHERO_ID`) USING BTREE,
  KEY `COLECCION_ID_F_FK` (`COLECCION_ID`) USING BTREE,
  KEY `PROGRESO_ID_F_FK` (`PROGRESO_ID`),
  CONSTRAINT `COLECCION_ID_F_FK` FOREIGN KEY (`COLECCION_ID`) REFERENCES `COLECCION` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `PROGRESO_ID_F_FK` FOREIGN KEY (`PROGRESO_ID`) REFERENCES `PROGRESO` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `TIPO_FICHERO_ID_F_FK` FOREIGN KEY (`TIPO_FICHERO_ID`) REFERENCES `TIPO_FICHERO` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=862 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para vista coleccion.GASTO
-- Creando tabla temporal para superar errores de dependencia de VIEW
CREATE TABLE `GASTO` (
	`ID` BIGINT(21) NOT NULL,
	`TIPO` VARCHAR(17) NOT NULL COLLATE 'utf8mb4_general_ci',
	`PLATAFORMA_NOMBRE` VARCHAR(255) NULL COLLATE 'utf8mb3_general_ci',
	`PLATAFORMA_CORTO` VARCHAR(50) NULL COLLATE 'utf8mb3_general_ci',
	`DESCRIPCION` VARCHAR(50) NULL COLLATE 'utf8mb3_general_ci',
	`CANTIDAD` BIGINT(21) NOT NULL,
	`FISICO` DECIMAL(22,0) NULL,
	`DIGITAL` DECIMAL(22,0) NULL,
	`COSTE` DECIMAL(42,6) NULL,
	`ORDEN_DESC` VARCHAR(6) NULL COLLATE 'utf8mb4_general_ci',
	`ORDEN_ASC` VARCHAR(255) NULL COLLATE 'utf8mb3_general_ci'
) ENGINE=MyISAM;

-- Volcando estructura para tabla coleccion.IDIOMA
CREATE TABLE IF NOT EXISTS `IDIOMA` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `DESCRIPCION` varchar(50) NOT NULL,
  `CORTO` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `DESC_CORTO_I_UK` (`DESCRIPCION`,`CORTO`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.PLATAFORMA
CREATE TABLE IF NOT EXISTS `PLATAFORMA` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `NOMBRE` varchar(255) NOT NULL,
  `CORTO` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `NOMBRE_PLAT_UK` (`NOMBRE`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.PROGRESO
CREATE TABLE IF NOT EXISTS `PROGRESO` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `BASE_ID` int(11) NOT NULL,
  `PLATAFORMA_ID` int(11) DEFAULT NULL,
  `ESTADO_PROGRESO_ID` int(11) NOT NULL,
  `PORCENTAJE` int(11) DEFAULT NULL,
  `HORAS` decimal(20,6) DEFAULT NULL,
  `HISTORIA_COMPLETA` bit(1) DEFAULT NULL,
  `NOTAS` varchar(500) DEFAULT NULL,
  `FECHA_INICIO` date DEFAULT NULL,
  `FECHA_FIN` date DEFAULT NULL,
  `FECHA_ULTIMO` date DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `PLAT_ID_J_FK` (`PLATAFORMA_ID`),
  KEY `ESTADO_J_FK` (`ESTADO_PROGRESO_ID`) USING BTREE,
  KEY `BASE_ID_J_FK` (`BASE_ID`) USING BTREE,
  CONSTRAINT `BASE_ID_J_FK` FOREIGN KEY (`BASE_ID`) REFERENCES `BASE` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `ESTADO_J_FK` FOREIGN KEY (`ESTADO_PROGRESO_ID`) REFERENCES `ESTADO` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `PLAT_ID_J_FK` FOREIGN KEY (`PLATAFORMA_ID`) REFERENCES `PLATAFORMA` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.REGION
CREATE TABLE IF NOT EXISTS `REGION` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `DESCRIPCION` varchar(50) NOT NULL,
  `CORTO` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE KEY `DESC_CORTO_R_UK` (`DESCRIPCION`,`CORTO`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.ROM
CREATE TABLE IF NOT EXISTS `ROM` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `BASE_ID` int(11) NOT NULL,
  `PLATAFORMA_ID` int(11) DEFAULT NULL,
  `NOMBRE_ROM` varchar(255) DEFAULT NULL,
  `NOMBRE_ROM_EXT` varchar(255) DEFAULT NULL,
  `UPDATE` varchar(255) DEFAULT NULL,
  `IDIOMA_ID` int(11) DEFAULT NULL,
  `REGION_ID` int(11) DEFAULT NULL,
  `TIPO_ROM_ID` int(11) DEFAULT NULL,
  `FECHA_DESCARGA` date DEFAULT current_timestamp(),
  PRIMARY KEY (`ID`),
  KEY `PLAT_ID_R_FK` (`PLATAFORMA_ID`),
  KEY `IDIOMA_ID_R_FK` (`IDIOMA_ID`),
  KEY `REGION_ID_R_FK` (`REGION_ID`),
  KEY `TIPO_ROM_ID_R_FK` (`TIPO_ROM_ID`),
  KEY `BASE_ID_R_FK` (`BASE_ID`) USING BTREE,
  CONSTRAINT `BASE_ID_R_FK` FOREIGN KEY (`BASE_ID`) REFERENCES `BASE` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `IDIOMA_ID_R_FK` FOREIGN KEY (`IDIOMA_ID`) REFERENCES `IDIOMA` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `PLAT_ID_R_FK` FOREIGN KEY (`PLATAFORMA_ID`) REFERENCES `PLATAFORMA` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `REGION_ID_R_FK` FOREIGN KEY (`REGION_ID`) REFERENCES `REGION` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `TIPO_ROM_ID_R_FK` FOREIGN KEY (`TIPO_ROM_ID`) REFERENCES `TIPO_ROM` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=873 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.TIENDA
CREATE TABLE IF NOT EXISTS `TIENDA` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `NOMBRE` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.TIPO_BASE
CREATE TABLE IF NOT EXISTS `TIPO_BASE` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `DESCRIPCION` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.TIPO_FICHERO
CREATE TABLE IF NOT EXISTS `TIPO_FICHERO` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `DESCRIPCION` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para tabla coleccion.TIPO_ROM
CREATE TABLE IF NOT EXISTS `TIPO_ROM` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `EXTENSION` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- La exportación de datos fue deseleccionada.

-- Volcando estructura para disparador coleccion.BASE_ON_INSERT
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BASE_ON_INSERT` BEFORE INSERT ON `BASE` FOR EACH ROW BEGIN	
	SET NEW.CODIGO = REGEXP_REPLACE(
		REPLACE(
			REPLACE(
				REPLACE(
					REPLACE(
						REPLACE(
							NEW.NOMBRE, 'ú', 'u'
						), 'ó', 'o'
					), 'í', 'i'
				), 'é', 'e'
			), 'á', 'a'
		), '[^a-zA-Z0-9]', ''
	);
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.BASE_ON_UPDATE
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BASE_ON_UPDATE` BEFORE UPDATE ON `BASE` FOR EACH ROW BEGIN
	SET NEW.CODIGO = REGEXP_REPLACE(
		REPLACE(
			REPLACE(
				REPLACE(
					REPLACE(
						REPLACE(
							NEW.NOMBRE, 'ú', 'u'
						), 'ó', 'o'
					), 'í', 'i'
				), 'é', 'e'
			), 'á', 'a'
		), '[^a-zA-Z0-9]', ''
	);
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.BASE_X_PLATA_ON_DELETE
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BASE_X_PLATA_ON_DELETE` AFTER DELETE ON `BASE_X_PLATAFORMA` FOR EACH ROW BEGIN
	CALL BASE_REFRESH_PLATAFORMAS(OLD.BASE_ID);
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.BASE_X_PLATA_ON_INSERT
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `BASE_X_PLATA_ON_INSERT` AFTER INSERT ON `BASE_X_PLATAFORMA` FOR EACH ROW BEGIN
	CALL BASE_REFRESH_PLATAFORMAS(NEW.BASE_ID);
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.COLECCION_ON_INSERT
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `COLECCION_ON_INSERT` BEFORE INSERT ON `COLECCION` FOR EACH ROW BEGIN
  DECLARE plataforma_corto VARCHAR(255);
  DECLARE plataforma_nombre VARCHAR(255);
  DECLARE juego_codigo VARCHAR(255);
  DECLARE fecha_ins_str VARCHAR(255);
  DECLARE new_id INT;
  
  SELECT CORTO, NOMBRE INTO plataforma_corto, plataforma_nombre
  FROM PLATAFORMA
  WHERE ID = NEW.PLATAFORMA_ID;
  
  SELECT CODIGO INTO juego_codigo
  FROM BASE
  WHERE ID = NEW.BASE_ID;
  
  SET fecha_ins_str = DATE_FORMAT(NEW.FECHA_INS, '%Y%m%d');
  SET new_id = LAST_INSERT_ID();
  
  SET NEW.CODIGO = 
    REGEXP_REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(
            REPLACE(
              REPLACE(
                CONCAT(
                  COALESCE(plataforma_corto, plataforma_nombre), '_',
                  juego_codigo, '_',
                  new_id, '_',
                  fecha_ins_str
                ), 'ú', 'u'
              ), 'ó', 'o'
            ), 'í', 'i'
          ), 'é', 'e'
        ), 'á', 'a'
      ), '[^a-zA-Z0-9_]', ''
    );
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.COLECCION_ON_UPDATE
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `COLECCION_ON_UPDATE` BEFORE UPDATE ON `COLECCION` FOR EACH ROW BEGIN
  DECLARE plataforma_corto VARCHAR(255);
  DECLARE plataforma_nombre VARCHAR(255);
  DECLARE juego_codigo VARCHAR(255);
  DECLARE fecha_ins_str VARCHAR(255);
  DECLARE mascara_str VARCHAR(50);
  
  SELECT CORTO, NOMBRE INTO plataforma_corto, plataforma_nombre
  FROM PLATAFORMA
  WHERE ID = NEW.PLATAFORMA_ID;
  
  SELECT CODIGO INTO juego_codigo
  FROM BASE
  WHERE ID = NEW.BASE_ID;
  
  SELECT
		CONCAT(
			IFNULL(
				(
					SELECT
						IF(p.HISTORIA_COMPLETA = 1 OR e.DESCRIPCION = 'Terminado', 2, IF(e.DESCRIPCION = 'Jugando', 1, 0))
					FROM PROGRESO p
					INNER JOIN ESTADO e ON e.ID = p.ESTADO_PROGRESO_ID
						AND e.TIPO = 2
					WHERE p.BASE_ID = NEW.BASE_ID
				), 0
			),
			';',
			IFNULL(
				(
					SELECT IF(COUNT(ID) > 0, 1, 0)
					FROM ROM
					WHERE
						BASE_ID = NEW.BASE_ID
						AND PLATAFORMA_ID = NEW.PLATAFORMA_ID
					GROUP BY BASE_ID, PLATAFORMA_ID
				), 0
			)
		) INTO mascara_str
	FROM DUAL;
  
  SET fecha_ins_str = DATE_FORMAT(NEW.FECHA_INS, '%Y%m%d');
  
  SET NEW.CODIGO = 
    REGEXP_REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(
            REPLACE(
              REPLACE(
                CONCAT(
                  COALESCE(plataforma_corto, plataforma_nombre), '_',
                  juego_codigo, '_',
                  NEW.ID, '_',
                  fecha_ins_str
                ), 'ú', 'u'
              ), 'ó', 'o'
            ), 'í', 'i'
          ), 'é', 'e'
        ), 'á', 'a'
      ), '[^a-zA-Z0-9_]', ''
    );
   
   SET NEW.MASCARA_AUX = mascara_str;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.PROGRESO_ON_DELETE
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `PROGRESO_ON_DELETE` AFTER DELETE ON `PROGRESO` FOR EACH ROW BEGIN
	UPDATE COLECCION SET ACTUALIZACIONES = COALESCE(ACTUALIZACIONES, 0) + 1 WHERE BASE_ID = OLD.BASE_ID;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.PROGRESO_ON_INSERT
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `PROGRESO_ON_INSERT` AFTER INSERT ON `PROGRESO` FOR EACH ROW BEGIN
	UPDATE COLECCION SET ACTUALIZACIONES = COALESCE(ACTUALIZACIONES, 0) + 1 WHERE BASE_ID = NEW.BASE_ID;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.PROGRESO_ON_UPDATE
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `PROGRESO_ON_UPDATE` AFTER UPDATE ON `PROGRESO` FOR EACH ROW BEGIN
	UPDATE COLECCION SET ACTUALIZACIONES = COALESCE(ACTUALIZACIONES, 0) + 1 WHERE BASE_ID = NEW.BASE_ID;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.ROM_ON_DELETE
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `ROM_ON_DELETE` AFTER DELETE ON `ROM` FOR EACH ROW BEGIN
	UPDATE COLECCION SET ACTUALIZACIONES = COALESCE(ACTUALIZACIONES, 0) + 1 WHERE BASE_ID = OLD.BASE_ID;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.ROM_ON_INSERT
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `ROM_ON_INSERT` BEFORE INSERT ON `ROM` FOR EACH ROW BEGIN
	SET NEW.NOMBRE_ROM_EXT = CONCAT(
		(SELECT CODIGO FROM BASE WHERE ID = NEW.BASE_ID),
		COALESCE(CONCAT('_', (SELECT CORTO FROM IDIOMA WHERE ID = NEW.IDIOMA_ID)), ''),
		COALESCE(CONCAT('_', (SELECT CORTO FROM REGION WHERE ID = NEW.REGION_ID)), ''),
		COALESCE(CONCAT('.', (SELECT EXTENSION FROM TIPO_ROM WHERE ID = NEW.TIPO_ROM_ID)), '')
	);
	
	SET NEW.NOMBRE_ROM = CONCAT(
		(SELECT CODIGO FROM BASE WHERE ID = NEW.BASE_ID),
		COALESCE(CONCAT('_', (SELECT CORTO FROM IDIOMA WHERE ID = NEW.IDIOMA_ID)), ''),
		COALESCE(CONCAT('_', (SELECT CORTO FROM REGION WHERE ID = NEW.REGION_ID)), '')
	);
	
	UPDATE COLECCION SET ACTUALIZACIONES = COALESCE(ACTUALIZACIONES, 0) + 1 WHERE BASE_ID = NEW.BASE_ID;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para disparador coleccion.ROM_ON_UPDATE
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `ROM_ON_UPDATE` BEFORE UPDATE ON `ROM` FOR EACH ROW BEGIN
	SET NEW.NOMBRE_ROM_EXT = CONCAT(
		(SELECT CODIGO FROM BASE WHERE ID = NEW.BASE_ID),
		COALESCE(CONCAT('_', (SELECT CORTO FROM IDIOMA WHERE ID = NEW.IDIOMA_ID)), ''),
		COALESCE(CONCAT('_', (SELECT CORTO FROM REGION WHERE ID = NEW.REGION_ID)), ''),
		COALESCE(CONCAT('.', (SELECT EXTENSION FROM TIPO_ROM WHERE ID = NEW.TIPO_ROM_ID)), '')
	);
	
	SET NEW.NOMBRE_ROM = CONCAT(
		(SELECT CODIGO FROM BASE WHERE ID = NEW.BASE_ID),
		COALESCE(CONCAT('_', (SELECT CORTO FROM IDIOMA WHERE ID = NEW.IDIOMA_ID)), ''),
		COALESCE(CONCAT('_', (SELECT CORTO FROM REGION WHERE ID = NEW.REGION_ID)), '')
	);
	
	UPDATE COLECCION SET ACTUALIZACIONES = COALESCE(ACTUALIZACIONES, 0) + 1 WHERE BASE_ID = NEW.BASE_ID;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- Volcando estructura para vista coleccion.COMPLETO
-- Eliminando tabla temporal y crear estructura final de VIEW
DROP TABLE IF EXISTS `COMPLETO`;
CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `COMPLETO` AS select row_number() over () AS `id`,concat(case when month(`p`.`FECHA_FIN`) = 1 then 'Enero' when month(`p`.`FECHA_FIN`) = 2 then 'Febrero' when month(`p`.`FECHA_FIN`) = 3 then 'Marzo' when month(`p`.`FECHA_FIN`) = 4 then 'Abril' when month(`p`.`FECHA_FIN`) = 5 then 'Mayo' when month(`p`.`FECHA_FIN`) = 6 then 'Junio' when month(`p`.`FECHA_FIN`) = 7 then 'Julio' when month(`p`.`FECHA_FIN`) = 8 then 'Agosto' when month(`p`.`FECHA_FIN`) = 9 then 'Septiembre' when month(`p`.`FECHA_FIN`) = 10 then 'Octubre' when month(`p`.`FECHA_FIN`) = 11 then 'Noviembre' when month(`p`.`FECHA_FIN`) = 12 then 'Diciembre' end,' ',year(`p`.`FECHA_FIN`)) AS `MES`,count(0) AS `CANTIDAD`,group_concat(`j`.`NOMBRE` order by `j`.`NOMBRE` ASC separator ', ') AS `JUEGOS`,date_format(`p`.`FECHA_FIN`,'%Y%m') AS `ORDEN_DESC` from (`PROGRESO` `p` join `BASE` `j` on(`j`.`ID` = `p`.`BASE_ID`)) where `p`.`FECHA_FIN` is not null group by month(`p`.`FECHA_FIN`),year(`p`.`FECHA_FIN`) order by date_format(`p`.`FECHA_FIN`,'%Y%m') desc;

-- Volcando estructura para vista coleccion.GASTO
-- Eliminando tabla temporal y crear estructura final de VIEW
DROP TABLE IF EXISTS `GASTO`;
CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `GASTO` AS select row_number() over () AS `ID`,`SUBQUERY`.`TIPO` AS `TIPO`,`SUBQUERY`.`PLATAFORMA_NOMBRE` AS `PLATAFORMA_NOMBRE`,`SUBQUERY`.`PLATAFORMA_CORTO` AS `PLATAFORMA_CORTO`,`SUBQUERY`.`DESCRIPCION` AS `DESCRIPCION`,`SUBQUERY`.`CANTIDAD` AS `CANTIDAD`,`SUBQUERY`.`FISICO` AS `FISICO`,`SUBQUERY`.`DIGITAL` AS `DIGITAL`,`SUBQUERY`.`COSTE` AS `COSTE`,`SUBQUERY`.`ORDEN_DESC` AS `ORDEN_DESC`,`SUBQUERY`.`ORDEN_ASC` AS `ORDEN_ASC` from ((select 'JUEGOS_MES' AS `TIPO`,NULL AS `PLATAFORMA_NOMBRE`,NULL AS `PLATAFORMA_CORTO`,concat(case when month(`c`.`FECHA_COMPRA`) = 1 then 'Enero' when month(`c`.`FECHA_COMPRA`) = 2 then 'Febrero' when month(`c`.`FECHA_COMPRA`) = 3 then 'Marzo' when month(`c`.`FECHA_COMPRA`) = 4 then 'Abril' when month(`c`.`FECHA_COMPRA`) = 5 then 'Mayo' when month(`c`.`FECHA_COMPRA`) = 6 then 'Junio' when month(`c`.`FECHA_COMPRA`) = 7 then 'Julio' when month(`c`.`FECHA_COMPRA`) = 8 then 'Agosto' when month(`c`.`FECHA_COMPRA`) = 9 then 'Septiembre' when month(`c`.`FECHA_COMPRA`) = 10 then 'Octubre' when month(`c`.`FECHA_COMPRA`) = 11 then 'Noviembre' when month(`c`.`FECHA_COMPRA`) = 12 then 'Diciembre' end,' ',year(`c`.`FECHA_COMPRA`)) AS `DESCRIPCION`,count(0) AS `CANTIDAD`,sum(if(`e`.`DESCRIPCION` = 'Digital',0,1)) AS `FISICO`,sum(if(`e`.`DESCRIPCION` = 'Digital',1,0)) AS `DIGITAL`,sum(`c`.`COSTE`) AS `COSTE`,date_format(`c`.`FECHA_COMPRA`,'%Y%m') AS `ORDEN_DESC`,NULL AS `ORDEN_ASC` from ((((`COLECCION` `c` join `PLATAFORMA` `p` on(`p`.`ID` = `c`.`PLATAFORMA_ID`)) join `ESTADO` `e` on(`e`.`ID` = `c`.`ESTADO_GENERAL_ID` and `e`.`TIPO` = 0 and `e`.`DESCRIPCION` not in ('Buscado','N/A','Reservado','Pedido'))) join `BASE` `b` on(`b`.`ID` = `c`.`BASE_ID`)) join `TIPO_BASE` `tb` on(`tb`.`ID` = `b`.`TIPO_ID` and `tb`.`DESCRIPCION` = 'Juego')) group by month(`c`.`FECHA_COMPRA`),year(`c`.`FECHA_COMPRA`)) union (select 'JUEGOS_PLATAFORMA' AS `TIPO`,`p`.`NOMBRE` AS `PLATAFORMA_NOMBRE`,`p`.`CORTO` AS `PLATAFORMA_CORTO`,NULL AS `DESCRIPCION`,count(0) AS `CANTIDAD`,sum(if(`e`.`DESCRIPCION` = 'Digital',0,1)) AS `FISICO`,sum(if(`e`.`DESCRIPCION` = 'Digital',1,0)) AS `DIGITAL`,sum(`c`.`COSTE`) AS `COSTE`,NULL AS `ORDEN_DESC`,ucase(`p`.`NOMBRE`) AS `ORDEN_ASC` from ((((`COLECCION` `c` join `PLATAFORMA` `p` on(`p`.`ID` = `c`.`PLATAFORMA_ID`)) join `ESTADO` `e` on(`e`.`ID` = `c`.`ESTADO_GENERAL_ID` and `e`.`TIPO` = 0 and `e`.`DESCRIPCION` not in ('Buscado','N/A','Reservado','Pedido'))) join `BASE` `b` on(`b`.`ID` = `c`.`BASE_ID`)) join `TIPO_BASE` `tb` on(`tb`.`ID` = `b`.`TIPO_ID` and `tb`.`DESCRIPCION` = 'Juego')) group by `c`.`PLATAFORMA_ID`) union (select 'JUEGOS_TOTAL' AS `TIPO`,NULL AS `PLATAFORMA_NOMBRE`,NULL AS `PLATAFORMA_CORTO`,NULL AS `DESCRIPCION`,count(0) AS `CANTIDAD`,sum(if(`e`.`DESCRIPCION` = 'Digital',0,1)) AS `FISICO`,sum(if(`e`.`DESCRIPCION` = 'Digital',1,0)) AS `DIGITAL`,sum(`c`.`COSTE`) AS `COSTE`,NULL AS `ORDEN_DESC`,NULL AS `ORDEN_ASC` from ((((`COLECCION` `c` join `PLATAFORMA` `p` on(`p`.`ID` = `c`.`PLATAFORMA_ID`)) join `ESTADO` `e` on(`e`.`ID` = `c`.`ESTADO_GENERAL_ID` and `e`.`TIPO` = 0 and `e`.`DESCRIPCION` not in ('Buscado','N/A','Reservado','Pedido'))) join `BASE` `b` on(`b`.`ID` = `c`.`BASE_ID`)) join `TIPO_BASE` `tb` on(`tb`.`ID` = `b`.`TIPO_ID` and `tb`.`DESCRIPCION` = 'Juego'))) union (select 'CONSOLAS_TOTAL' AS `TIPO`,NULL AS `PLATAFORMA_NOMBRE`,NULL AS `PLATAFORMA_CORTO`,NULL AS `DESCRIPCION`,count(0) AS `CANTIDAD`,sum(if(`e`.`DESCRIPCION` = 'Digital',0,1)) AS `FISICO`,sum(if(`e`.`DESCRIPCION` = 'Digital',1,0)) AS `DIGITAL`,sum(`c`.`COSTE`) AS `COSTE`,NULL AS `ORDEN_DESC`,NULL AS `ORDEN_ASC` from ((((`COLECCION` `c` join `PLATAFORMA` `p` on(`p`.`ID` = `c`.`PLATAFORMA_ID`)) join `ESTADO` `e` on(`e`.`ID` = `c`.`ESTADO_GENERAL_ID` and `e`.`TIPO` = 0 and `e`.`DESCRIPCION` not in ('Buscado','N/A','Reservado','Pedido'))) join `BASE` `b` on(`b`.`ID` = `c`.`BASE_ID`)) join `TIPO_BASE` `tb` on(`tb`.`ID` = `b`.`TIPO_ID` and `tb`.`DESCRIPCION` = 'Consola'))) union (select 'JUEGOS_TIENDAS' AS `TIPO`,NULL AS `PLATAFORMA_NOMBRE`,NULL AS `PLATAFORMA_CORTO`,`t`.`NOMBRE` AS `DESCRIPCION`,count(0) AS `CANTIDAD`,sum(if(`e`.`DESCRIPCION` = 'Digital',0,1)) AS `FISICO`,sum(if(`e`.`DESCRIPCION` = 'Digital',1,0)) AS `DIGITAL`,sum(`c`.`COSTE`) AS `COSTE`,NULL AS `ORDEN_DESC`,ucase(`t`.`NOMBRE`) AS `ORDEN_ASC` from ((((`COLECCION` `c` join `ESTADO` `e` on(`e`.`ID` = `c`.`ESTADO_GENERAL_ID` and `e`.`TIPO` = 0 and `e`.`DESCRIPCION` not in ('Buscado','N/A','Reservado','Pedido'))) join `BASE` `b` on(`b`.`ID` = `c`.`BASE_ID`)) join `TIPO_BASE` `tb` on(`tb`.`ID` = `b`.`TIPO_ID` and `tb`.`DESCRIPCION` = 'Juego')) join `TIENDA` `t` on(`t`.`ID` = `c`.`TIENDA_ID`)) group by `t`.`NOMBRE`) union (select 'ROMS_PLATAFORMA' AS `TIPO`,`p`.`NOMBRE` AS `PLATAFORMA_NOMBRE`,`p`.`CORTO` AS `PLATAFORMA_CORTO`,NULL AS `DESCRIPCION`,count(0) AS `CANTIDAD`,NULL AS `FISICO`,NULL AS `DIGITAL`,NULL AS `COSTE`,NULL AS `ORDEN_DESC`,ucase(`p`.`NOMBRE`) AS `ORDEN_ASC` from (((`ROM` `r` join `PLATAFORMA` `p` on(`p`.`ID` = `r`.`PLATAFORMA_ID`)) join `BASE` `b` on(`b`.`ID` = `r`.`BASE_ID`)) join `TIPO_BASE` `tb` on(`tb`.`ID` = `b`.`TIPO_ID` and `tb`.`DESCRIPCION` = 'Juego')) group by `r`.`PLATAFORMA_ID`)) `SUBQUERY` order by `SUBQUERY`.`TIPO`,`SUBQUERY`.`ORDEN_DESC` desc,`SUBQUERY`.`ORDEN_ASC`;

/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, 'system') */;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */;
